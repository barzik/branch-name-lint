#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const findUp = require('find-up');
const meow = require('meow');
const BranchNameLint = require('../index');

const cli = meow(`
	Usage
	  $ npx branch-name-lint [configuration-file.json|configuration-file.js] [options]

	Options
	  --help             - to get this screen
	  --branch <name>    - specify branch name manually (overrides environment variable)

	Environment Variables
	  GITHUB_REF         - used by default, automatically extracts branch name from refs/heads/ format

	Configuration
	  branchEnvVariable  - configure which environment variable to use (defaults to GITHUB_REF)

	Examples
	  $ branch-name-lint
	  Use default configutation or the configuration specified in package.json to validate & lint the branch name.
	  $ branch-name-lint [configuration-file.json|configuration-file.js]
	  Use configutation file to validate & lint the branch name.
	  $ branch-name-lint --branch feature/my-branch
	  Lint a specific branch name instead of the current git branch.
	  $ GITHUB_REF=refs/heads/feature-branch-1 branch-name-lint
	  Use branch name from GITHUB_REF (automatically extracts from refs/heads/).
	  $ MY_CUSTOM_VAR=feature/my-branch branch-name-lint config-with-custom-var.json
	  Use a custom environment variable (requires "branchEnvVariable": "MY_CUSTOM_VAR" in config).
`);
const configFileName = cli.input[0];

class BranchNameLintCli {
	constructor() {
		this.options = this.loadConfiguration(configFileName);
		const branchNameLint = new BranchNameLint(this.options);
		const answer = branchNameLint.doValidation();
		if (answer === 1) {
			process.exit(1);
		}
	}

	loadConfiguration(filename = 'package.json') {
		const pkgFile = findUp.sync(filename);
		if (!pkgFile) {
			console.error(`Could not find configuration file: ${filename}`);
			process.exit(1);
		}
		
		const fileExtension = path.extname(pkgFile).toLowerCase();
		
		// Load JS files using require
		if (fileExtension === '.js') {
			try {
				// Use absolute path for require
				const config = require(pkgFile);
				return config.branchNameLinter || config;
			} catch (error) {
				console.error(`Error loading JavaScript configuration: ${error.message}`);
				process.exit(1);
			}
		} 
		// Load JSON files as before
		else {
			try {
				const pkg = JSON.parse(fs.readFileSync(pkgFile));
				return (pkg.branchNameLinter) || {};
			} catch (error) {
				console.error(`Error parsing JSON configuration: ${error.message}`);
				process.exit(1);
			}
		}
	}
}

new BranchNameLintCli(); // eslint-disable-line no-new
